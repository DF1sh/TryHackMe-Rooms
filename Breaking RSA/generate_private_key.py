from Cryptodome.PublicKey import RSA
from Cryptodome.Util.number import inverse

# Definizione dei numeri primi p e q
p = 30989413979221186440875537962143588279079180657276785773483163084840787431751925008409382782024837335054414229548213487269055726656919580388980384353939415484564294377142773553463724248812140196477077493185374579859773369113593661078143295090153526634169495633688691753691720088511452131593712380121967802013042678209312444897975134224456911144218687330712554564836016616829044029963400114373142702236623994027926718855592051277298418373056707389464234977873660836337340136755093657804153998347162906059312569124331219753644648657722107663012261197728061352359157767204739644300066112274629356310784052940617408516621
q = 30989413979221186440875537962143588279079180657276785773483163084840787431751925008409382782024837335054414229548213487269055726656919580388980384353939415484564294377142773553463724248812140196477077493185374579859773369113593661078143295090153526634169495633688691753691720088511452131593712380121967802013042678209312444897975134224456911144218687330712554564836016616829044029963400114373142702236623994027926718855592051277298418373056707389464234977873660836337340136755093657804153998347162906059312569124331219753644648657722107663012261197728061352359157767204739644300066112274629356310784052940617408518123

# Calcolo del modulo n
n = p * q

# Calcolo dell'esponente pubblico e
# Un valore comune per e Ã¨ 65537
e = 65537

# Calcolo dell'esponente privato d
phi = (p - 1) * (q - 1)
d = inverse(e, phi)

# Creazione dell'oggetto chiave RSA
key = RSA.construct((n, e, d))

# Esportazione della chiave privata in formato PEM
private_key = key.export_key()
print(private_key.decode())

# Salvataggio della chiave privata in un file
with open('private_key.pem', 'wb') as f:
    f.write(private_key)
